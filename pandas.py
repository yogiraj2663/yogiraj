# -*- coding: utf-8 -*-
"""pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bLb3CxJ2DOu3mNCFeM7cW1s0Y528gbA2
"""

import pandas as pd
ds1 = pd.Series([2, 4, 8, 10])
ds2 = pd.Series([3, 5, 7, 9])
print("multiply two series:")
ds = ds1 * ds2
print(ds)
print("divided Series1 by Series2")
ds = ds1/ ds2
print(ds)

import pandas as pd
import numpy as np
s1 = pd.Series(['100', '200', '400'])
s2 = pd.Series(['10', '20', '40'])
df = pd.concat([s1, s2], axis=1)
new_col = [1, 2, 3]
idx = 0
df.insert(loc=idx, column='1', value=new_col)
print("\nNew DataFrame")
print(df)

import pandas as pd
import numpy as np
s1 = pd.Series(['100', '200', '400'])
s2 = pd.Series(['10', '20', '40'])
print("Data Series:")
print(s1)
print(s2)
df = pd.concat([s1, s2], axis=1)
print("New DataFrame combining two series:")
print(df)

import numpy as np
a=np.array([1,2,3,4,5])
print("a :",a)
sum=np.sum(a)
print("sum :",sum)

import numpy as np
a=np.array([1,2,3,4,10])
print("a :",a)
avg=np.average(a)
print("average :",avg)

import numpy as np

# Creating a 1D array
arr = np.array([1, 2, 3, 4])
print("Array with rank 1: \n", arr)

# Creating a 2D array
arr = np.array([[1, 2, 3],
                [4, 5, 6]])
print("Array with rank 2: \n", arr)

# Creating an array with shape (1, 3, 2)
arr = np.array((1, 3, 2))  # Corrected from np.aaray to np.array
print("Array created using passed tuple: \n", arr)



import pandas as pd
d1 = {'a': 200, 'b': 600, 'c':300}
print("Original dictionary:")
print(d1)
new_series = pd.Series(d1)
print("Converted series:")
print(new_series)

import pandas as pd
import numpy as np
exam_data  = {'name': ['vikram dhanush', 'arjun pawar'],
'score': [12.5, 1]}
labels = ['NAME', 'SCORE']
df = pd.DataFrame(exam_data , index=labels)
print(df)

import pandas as pd
ds1 = pd.Series([2, 4, 8, 10])
ds2 = pd.Series([1, 3, 7, 9])
print("Multiply two Series:")
ds = ds1 * ds2
print(ds)
print("Divide Series1 by Series2:")
ds = ds1 / ds2
print(ds)

import pandas as pd
import numpy as np
sr1 = pd.Series([1, 2, 3])
sr2 = pd.Series([2, 3, 6])
print("Original Series:")
print("sr1:")
print(sr1)
print("sr2:")
print(sr2)
print("\nItems of a given series not present in another given series:")
sr11 = pd.Series(np.union1d(sr1, sr2))
sr22 = pd.Series(np.intersect1d(sr1, sr2))
result = sr11[~sr11.isin(sr22)]
print(result)

import pandas as pd
s = pd.Series([400, 300.12,100, 200])
print("Original Data Series:")
print(s)
new_s = pd.Series(s).sort_values()
print(new_s)

import pandas as pd
import numpy as np
sr1 = pd.Series([2, 6, 3])
sr2 = pd.Series([2, 3, 6])
print("original Series:")
print("sr1:")
print(sr1)
print("sr2:")
print(sr2)
print("\nitems of a given series not present in another given series:")
sr11 = pd.Series(np.union1d(sr1, sr2))
sr22 = pd.Series(np.intersect1d(sr1, sr2))
result = sr11[~sr11.isin(sr22)]
print(result)

import pandas as pd
import numpy as np
exam_data  = {'name': ['Manish', 'Dhiraj','Man', 'Dhir'],
'score': [12.5, 91,20.5, 19]}
df = pd.DataFrame(exam_data )
print("Rows where score between 15 and 20 (inclusive):")
print(df[df['score'].between(15, 20)])

import pandas as pd
import numpy as np
exam_data  = {'name': ['soona', 'poooo','handi', 'yopo'],
'score': [12.5, 26,63.2, 26]}
df = pd.DataFrame(exam_data )
df['name'] = df['name'].replace('kelly', 'andwor')
print(df)



import numpy as np
a=np.array([1,22,3,9,3])
print("a :",a)
sum=np.sum(a)
print("sum :",sum)

x = np.array([[1,1,4], [4,5,6]])
np.prod(x)

import numpy as np
a=np.array([1,2,3,4,5])
print("array a :",a)
mean=np.mean(a)
print("mean :",mean)

import pandas as pd
data = pd.read_csv("/content/titanic.csv")
print(data)

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
data = pd.read_csv("/yogiraj.csv")
print(data)

import pandas as pd
data = pd.read_csv("/content/titanic.csv")
print(data)

import pandas as pd
df = pd.DataFrame([[2,3,4,6],
                   [2,4,5,6],
                   [2,3,6,5]],
                  columns=['english', 'social',
                           'kannada', 'hindi'])
print(df)

df.sum()

df.describe()

df.groupby(by=['social'])
a=df.groupby('social')
a.first()

import pandas as pd
from datetime import datetime
import numpy as np
range_date = pd.date_range(start='1/1/2022', end = '12/08/2022', freq = 'min')
print(range_date)

import pandas as pd
from datetime import datetime
import numpy as np
range_date = pd.date_range(start='1/1/2022', end = '12/08/2022', freq='min')
print(type(range_date[110]))

import pandas as pd
from datetime import datetime
import numpy as np
range_date = pd.date_range(start ='1/1/2019')
df = pd.Dataframe(range_date, columns=['date'])
data

import pandas as pd

# Creating our dataset
df = pd.DataFrame([[9, 4, 8, 9],
                   [8, 10, 7, 6],
                   [7, 6, 8, 5]],
                  columns=['Maths',  'English',
                           'Science', 'History'])

# display dataset
print(df)

df.sum()

df.describe()

df.agg(['sum', 'min', 'max'])

df.groupby(by=['Maths'])

a = df.groupby('Maths')
a.first()

b = df.groupby(['Maths', 'Science'])
b.first()

import pandas as pd
from datetime import datetime
import numpy as np

range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019', freq ='Min')
print(range_date)

import pandas as pd
from datetime import datetime
import numpy as np

range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019', freq ='Min')
print(type(range_date[110]))

import pandas as pd
from datetime import datetime
import numpy as np

range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019',freq ='Min')
df = pd.DataFrame(range_date, columns =['date'])
df['data'] = np.random.randint(0, 100, size =(len(range_date)))

print(df.head(10))

import pandas as pd
from datetime import datetime
import numpy as np

range_date = pd.date_range(start ='1/1/2019', end ='1/08/2019',freq ='Min')

df = pd.DataFrame(range_date, columns =['date'])
df['data'] = np.random.randint(0, 100, size =(len(range_date)))

string_data = [str(x) for x in range_date]
print(string_data[1:11])

import pandas as pd
from datetime import datetime
import numpy as np

range_data = pd.date_range(start ='1/1/2019', end ='1/08/2019', freq ='Min')
df = pd.DataFrame(range_data, columns =['date'])
df['data'] = np.random.randint(0, 100, size =(len(range_data)))

df['datetime'] = pd.to_datetime(df['date'])
df = df.set_index('datetime')
df.drop(['date'], axis = 1, inplace = True)

# Use .loc to access rows by datetime index
print(df.loc['2019-01-05 00:01:00':'2019-01-05 00:10:00'])



import pandas as pd

df = pd.DataFrame({'A': ['John', 'Boby', 'Mina'],
                   'B': ['Masters', 'Graduate', 'Graduate'],
                   'C': [27, 23, 21]})

# Use keyword arguments for 'index', 'columns', and 'values'
df.pivot(index='A', columns='B', values='C')

import pandas as pd

# creating a dataframe
df = pd.DataFrame({'A': ['John', 'Boby', 'Mina'],
                   'B': ['Masters', 'Graduate', 'Graduate'],
                   'C': [27, 23, 21]})
df.pivot(index='A', columns='B', values=['C', 'A'])

import pandas as pd

# Sample DataFrame
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
    'Tokyo': [15, 16, 12],
    'Paris': [10, 11, 13],
    'Moscow': [5, 2, 3]
}
df = pd.DataFrame(data)
df

import pandas as pd

# Sample DataFrame
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
    'Tokyo': [15, 16, 12],
    'Paris': [10, 11, 13],
    'Moscow': [5, 2, 3]
}
df = pd.DataFrame(data)
print("Pivoted DataFrame:")
print(df)

import pandas as pd

# Example DataFrame
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
    'City': ['Tokyo', 'Paris', 'Moscow'],
    'Temperature': [15, 16, 12]
}
df = pd.DataFrame(data)
df
pivot_df = df.pivot(index='Date', columns='City', values=['Temperature'])
print("Pivoted DataFrame:")
print(pivot_df)
df

# Create a simple dataframe

# importing pandas as pd
import pandas as pd
import numpy as np

# creating a dataframe
df = pd.DataFrame({'A': ['John', 'Boby', 'Mina', 'Peter', 'Nicky'],
      'B': ['Masters', 'Graduate', 'Graduate', 'Masters', 'Graduate'],
      'C': [27, 23, 21, 23, 24]})

df

table = pd.pivot_table(df, index =['A', 'B'])

table

# Creates a pivot table dataframe
table = pd.pivot_table(df, values ='A', index =['B', 'C'],
                         columns =['B'], aggfunc = np.sum)

table

# Sample DataFrame
data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03'],
    'Tokyo': [15, 16, 12],
    'Paris': [10, 11, 13],
    'Moscow': [5, 2, 3]
}
df = pd.DataFrame(data)
# Using melt to reshape data
melted_df = df.melt(id_vars=['Date'], var_name='City', value_name='Temperature')
print("\nMelted DataFrame:")
print(melted_df)

import pandas as pd

# Example DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David'],
    'Age': [25, 30, 35, 40]
}
df = pd.DataFrame(data)

# Using map to apply a function to a Series
df['Age_Category'] = df['Age'].map(lambda age: 'Young' if age < 30 else 'Old')
print(df)

# Using boolean indexing to filter rows
filtered_df = df[df['Age'] < 35]
print(filtered_df)

from functools import reduce

# Applying reduce with a lambda function to get the sum of 'Age'
total_age = reduce(lambda x, y: x + y, df['Age'])
print("Total Age:", total_age)

# Using a lambda function with apply to create a new column
df['Name_Length'] = df['Name'].apply(lambda name: len(name))
print(df)

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
plt.bar(categories,amounts)
# Adding labels
plt.xlabel('Categories')
plt.ylabel('Amounts')
# Adding a title

plt.title('Bar Chart of Amounts by Category')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
amounts = [25, 50, 30]
# Create a pie chart
plt.pie(amounts, labels=categories)
# Adding a title
plt.title('Pie Chart of Amounts by Category')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data
years = [2010, 2011, 2012, 2013, 2014]
amounts = [100, 120, 140, 110, 150]
# Create a line chart
plt.plot(years, amounts, marker='o', linestyle='--')
# Adding labels and a title
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Line Chart of Amounts Over Time')

# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()

import matplotlib.pyplot as plt
# Sample data
x = [10, 20, 30, 40, 50]
y = [50, 40, 30, 20, 10]
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')
plt.title('Scatter Plot of X vs. Y')
# Show the plot
plt.grid(True) # Add a grid for better readability
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data for demonstration
data = np.random.randn(1000) # Replace with your dataset
# Create a histogram
plt.hist(data, bins=20, edgecolor='k')
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of Data')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a histogram
plt.hist(data, bins=30, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Normal Distribution')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following a uniform distribution
low, high = 0, 10
data = np.random.uniform(low, high, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Uniform Distribution')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate random data following an exponential distribution
scale = 1.0
data = np.random.exponential(scale, 1000)
# Create a histogram
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of an Exponential Distribution')
# Show the plot
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
# Generate random data following a normal distribution
mu, sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
# Create a KDE plot
sns.kdeplot(data, shade=True)
# Adding labels and a title
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot of a Normal Distribution')
# Show the plot
plt.show()

import seaborn as sns
# Generate random data for two different distributions
data1 = np.random.normal(0, 1, 1000)
data2 = np.random.normal(2, 1, 1000)
# Create a box plot to compare the two distributions
sns.boxplot(data=[data1, data2])
# Adding labels and a title
plt.xlabel('Distribution')
plt.ylabel('Value')
plt.title('Box Plot Comparison of Two Distributions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]

# Create a pie chart
plt.pie(proportions, labels=categories, autopct='%1.1f%%')
# Adding a title
plt.title('Pie Chart of Proportions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions for multiple categories
categories = ['Category A', 'Category B', 'Category C']
proportions1 = [0.2, 0.4, 0.1]
proportions2 = [0.3, 0.2, 0.4]
# Create a stacked bar chart
plt.bar(categories, proportions1, label='Group 1')
plt.bar(categories, proportions2, bottom=proportions1, label='Group 2')
# Adding labels and a legend
plt.xlabel('Categories')
plt.ylabel('Proportions')
plt.title('Stacked Bar Chart of Proportions')
plt.legend()
# Show the plot
plt.show()

import matplotlib.pyplot as plt
# Sample data representing proportions
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
# Create a horizontal bar chart
plt.barh(categories, proportions)
# Adding labels and a title
plt.xlabel('Proportions')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart of Proportions')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data representing proportions over time
years = [2010, 2011, 2012, 2013, 2014]
proportions1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])

proportions2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])
# Create a stacked area chart
plt.stackplot(years, proportions1, proportions2, labels=['Group 1', 'Group 2'], alpha=0.5)
# Adding labels and a legend
plt.xlabel('Year')
plt.ylabel('Proportions')
plt.title('Stacked Area Chart of Proportions Over Time')
plt.legend(loc='upper left')
# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample data for two variables with a positive association
x = np.random.rand(100)
y = 2 * x + np.random.rand(100)
# Create a scatter plot
plt.scatter(x, y)
# Adding labels and a title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot for Bivariate Association')
# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Generate sample time series data
time = np.arange(0, 10, 0.1)
data = np.sin(time)
# Create a line plot
plt.plot(time, data)

# Adding labels and a title
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Line Plot for Time Series Data')
# Show the plot
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
# Generate a random correlation matrix
corr_matrix = np.corrcoef(np.random.rand(5, 5))
# Create a heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
# Adding a title
plt.title('Heatmap of Correlation Matrix')
# Show the plot
plt.show()

import seaborn as sns
# Load a sample dataset with multiple variables
data = sns.load_dataset("iris")
# Create a pair plot to visualize associations between variables
sns.pairplot(data, hue="species")
# Adding a title
plt.suptitle('Pair Plot of Iris Dataset', y=1.02)
# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
# Load a sample dataset with categorical and numeric variables
data = sns.load_dataset("tips")
# Create a box plot to visualize the association between a categorical variable and a numeric

sns.boxplot(x="day", y="total_bill", data=data)
# Adding labels and a title
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount')
plt.title('Box Plot of Total Bill Amount by Day')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng))

# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng, columns=['Value'])

# Create a line plot
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value'])

# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Line Plot of Time Series Data')

# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Generate a sample time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng)).cumsum()

# Create a time series DataFrame
time_series_df = pd.DataFrame(time_series_data, index=date_rng, columns=['Cumulative Value'])

# Create an area plot
plt.figure(figsize=(12, 6))
plt.fill_between(time_series_df.index, time_series_df['Cumulative Value'], color='skyblue')

# Adding labels and a title
plt.xlabel('Date')
plt.ylabel('Cumulative Value')
plt.title('Area Plot of Cumulative Time Series Data')

# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Generate a sample multivariate time series dataset
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
data = {
    'Value1': np.random.randn(len(date_rng)),
    'Value2': np.random.randn(len(date_rng)) }

# Create a time series DataFrame
time_series_df = pd.DataFrame(data, index=date_rng)

# Create multiple line plots on the same axis
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value1'], label='Value1')
plt.plot(time_series_df.index, time_series_df['Value2'], label='Value2')

# Adding labels, a legend, and a title
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Multiple Line Plots of Multivariate Time Series Data')
plt.legend()

# Show the plot
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
# Sample data
categories = ['Category A', 'Category B', 'Category C']
sales = [500, 750, 600]
# Create a bar chart plt.figure(figsize=(8, 6))
plt.bar(categories, sales, color='skyblue')
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
# Sample data
x = np.linspace(0, 2 * np.pi, 100)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = np.sin(2 * x)
y4 = np.cos(2 * x)
# Create a 2x2 grid of subplots
fig, axes = plt.subplots(2, 2, figsize=(10, 6))
# Plot data on each subplot
axes[0, 0].plot(x, y1)
axes[0, 0].set_title('Sin(x)')
axes[0, 1].plot(x, y2)
axes[0, 1].set_title('Cos(x)')
axes[1, 0].plot(x, y3)
axes[1, 0].set_title('Sin(2x)')
axes[1, 1].plot(x, y4)
axes[1, 1].set_title('Cos(2x)')
# Add spacing between subplots
plt.tight_layout()
# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = sns.load_dataset("iris")
df = pd.DataFrame(data)
sns.barplot(x='species', y='sepal_length', data=df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
tips= sns.load_dataset("tips")
daily_total_bill=tips.groupby("day")['total_bill'].sum()
print(daily_total_bill)
plt.pie(daily_total_bill.values,labels=daily_total_bill.index)
plt.xlabel("day of the week")
plt.ylabel('total bill amount')
plt.title('pie plot of total bill amount by day')

plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
# Load a sample dataset (Iris dataset)
iris = sns.load_dataset('iris')
# Create a pair plot (scatterplot matrix) using Seaborn
sns.set(style="ticks")
sns.pairplot(iris, hue="species", diag_kind="kde")
# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
tips= sns.load_dataset("tips")
daily_total_bill=tips.groupby("day")['total_bill'].sum()
daily_total_bill.plot(kind='line',marker='o',color='blue')
plt.xlabel("day of the week")
plt.ylabel('total bill amount')
plt.title('line plot of total bill amount by day')

plt.show()

import matplotlib.pyplot as plt
color=['red','green','yellow']
amounts=[100,120,150]
plt.bar(color,amounts)
plt.xlabel("color")
plt.ylabel("sizes")
plt.title("bar chart")
plt.show()

import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,20,30,40,50]
plt.pie(y,labels=x,autopct='%1.1f%%')
plt.xlabel=('class')
plt.ylabel=('marks')
plt.title('pie chart')
plt.show()